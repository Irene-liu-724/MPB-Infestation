#A general view of the model behavior
library(tidyverse)
library(ggplot2)
library(gganimate)
library(gifski)
library(transformr)
library(RColorBrewer)
library(ggthemes)
library(paletteer)
library(cowplot)
library(ggforce)

source("create_cluster.R")
source("Macroscale_dispersion.R")
source("Birth_death_process.R")

#initial pattern
n <- 50
initial.pattern <- data.frame(expand.grid(row = 1:n, col = 1:n),
                              density = c(rep(0,50*21), 
                                          rep(0,22), 0.6, 0.5, 0.4, 0.7, rep(0,24),
                                          rep(0,22), 0.5, 0.5, 0.4, 0.2, 0.8, 0.3, rep(0,22),
                                          rep(0,21), 0.2, 0.3, 0.4, 0.7, 0.5, 0.4, 0.2, rep(0,22),
                                          rep(0,20), 0.2, 0.5, rep(0.4, 6), rep(0, 22),
                                          rep(0,22), 0.4, 0.7, 0.4, 0.3, 0.3, rep(0,23),
                                          rep(0,22), 0.6, 0.3, 0.6, 0.6, 0.1, rep(0,23),
                                          rep(0,22), 0.3, 0.5, 0.2, 0.1, 0.1, rep(0,23),
                                          rep(0,22), 0.2, 0.6, 0.6, 0.4, 0.1, rep(0,23),
                                          #rep(0,22), 0.6, 0.5, 0.4, 0.3, rep(0,24),
                                          #rep(0,22), 0.6, 0.5, 0.4, 0.2, rep(0,24),
                                          rep(0,50*21)))

#progression of the model
progression <- function(x, n_x,
                        birth_rate, death_rate, tau, capacity, incell_rep,
                        alpha, beta, gamma1, gamma2, phi, rho, xi,
                        t_star){
  pb <- txtProgressBar(min = 0, max = t_star, initial = 0, style = 3)
  t <- 0
  dat <- data.frame(x, time = t)
  while (t <= t_star) {
    t <- t + 1
    setTxtProgressBar(pb, t + 1)
    #set up extended cluster for damaged cells
    cluster <- ext.cluster(x)
    #birth-death process
    x_temp <- birth_death_process(cluster, birth_rate = birth_rate, death_rate = death_rate,
                                  tau = tau, capacity = capacity, incell_rep = incell_rep)
    #dispersal
    x_temp <- dispersal_process(x_temp, alpha = alpha, beta = beta, gamma1 = gamma1,
                                gamma2 = gamma2, phi = phi, rho = rho, xi = xi)
    #remove auxiliary cells
    table_temp <- filter(x_temp, row %in% seq(1, n_x, 1) & col %in% seq(1, n_x, 1))
    #complete the grid
    if (nrow(table_temp) != n_x * n_x){
      table <- complete(table_temp, row = seq(1, n_x, 1), col = seq(1, n_x, 1),
                        fill = list(density = 0))
    } else {table <- table_temp}
    dat_temp <- cbind(table, time = t)
    dat <- rbind(dat, dat_temp)
    
    if(sum(dat_temp$density) == 0) {
      print(paste("All densities are zero, stop at time:", t))
      break
    } else { x <- table_temp}
  }
  return(dat)
}

end <- progression(x = initial.pattern,
                    n_x = n,
                    birth_rate = 1,
                    death_rate = 0.4,
                    tau = 100,
                    capacity = 100,
                    incell_rep = 20,
                    alpha = 1,
                    beta = 1,
                    gamma1 = 0.8,
                    gamma2 = 0.8,
                    phi = 1/3,
                    rho = 1/3,
                    xi = 1,
                    t_star = 150)
                                      
#Plot cell states at certain time points
#time points: 0, 30, 60, 90, 120, 150
test <- filter(end, time == 90)
cell_plot <- hexagon_grid(test)

ggplot(data = cell_plot, aes(x = vx, y = vy)) +
  geom_polygon(aes(fill = density, group = ID), col = "gray34") +
  scale_fill_paletteer_c("ggthemes::Red-Green-Gold Diverging", direction = -1,
                         breaks = c(0, 1), labels = c("Low: 0", "High: 1"),
                         limits = c(0, 1)) +
  theme(panel.background = element_rect(fill = "white"),
        panel.border = element_blank(),
        panel.grid.major = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        plot.margin = unit(c(0,0,0,0), "cm"),
        legend.position = "none",
        legend.direction = "horizontal",
        legend.title = element_text(size = 10)) +
  labs(fill = "Cell Density", x = "", y = "") +
  guides(guide_colorbar(ticks = FALSE)) +
  coord_fixed(ratio = 1)

#complexity 
comp_dat <- filter(end, density > 0)
n_neighbor <- c()
for (t in 0 : 151){
  n_neighbor_t <- c()
  comp_dat_temp <- comp_dat %>% filter(time == t)
  for (i in seq_len(nrow(comp_dat_temp))){
    comp_temp <- comp_dat_temp[i, ]
    comp_cluster <- mini.cluster(comp_temp)
    comp_cluster_temp <- merge(comp_dat_temp, comp_cluster, all = FALSE, 
                              by = c("row", "col"))
    n_neighbor_t[i] <- nrow(filter(comp_cluster_temp, density.y == 0))
  }
  n_neighbor <- c(n_neighbor, n_neighbor_t)
}

comp_dat$n_neighbor <- n_neighbor
complex <- comp_dat %>%
  group_by(time) %>%
  summarise(n = n(),
            n_neigh = sum(n_neighbor)) %>%
  mutate(complexity = (6 * n - n_neigh)/n)

#complexity curve fitting
#exponential
fit4 <- lm(log(complexity)~time, data = complex)
summary(fit4)
x_axis <- seq(min(complex$time), max(complex$time))


#theme settings for plots
theme_setting <- theme(panel.background = element_blank(),
        axis.text.y   = element_text(size=23),
        axis.text.x   = element_text(size=23),
        axis.title.y  = element_text(size=23),
        axis.title.x  = element_text(size=23),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"),
        panel.border = element_rect(colour = "black", fill=NA, linewidth=1),
        plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
        plot.title = element_text(size=20, hjust=1)
  ) 

complex$pred <- exp(predict(fit4))
p <- ggplot(data = complex, aes(x = time, y = complexity)) +
  geom_point(color = "#87609c", size = 5) +
  #geom_line(color = "darkcyan", linewidth = 0.4) +
  xlab("Time") +
  ylab("Complexity of pattern") +
  theme_setting + 
  #coord_fixed(ratio = 80) + 
  geom_line(aes(y = pred), linewidth = 1.5, color = "#3c224b")
p

#velocity of dispersion
table_ncell <- end %>%
  group_by(time) %>%
  filter(density > 0) %>%
  summarise(ncell = n()) %>%
  mutate(radius = sqrt(ncell * 6 * sqrt(3)/pi)) 

dispersal_rate <- diff(table_ncell$radius)
rate_dat <- data.frame(rate = dispersal_rate,
                       time = seq(1:length(dispersal_rate)))
#velocity plot
ggplot(data = rate_dat, aes(x = time, y = rate)) +
  geom_point(color = "#f16c23", size = 3) +
  geom_line(color = "#f16c23", linewidth = 1) +
  geom_hline(yintercept = mean(dispersal_rate), linetype=5, 
             color = "black", linewidth = 0.6) +
  xlab("Time") +
  ylab("Velocity of dispersion") +
  ylim(-0.8, 1.5) +
  theme_setting
#acf plot of dispersion velocity
x <- dispersal_rate
#x <- x - mean(x)
#acf plot
ts.acf <- acf(x, plot=F)
alpha <- 0.95
conf.lims <- c(-1,1)*qnorm((1 + alpha)/2)/sqrt(ts.acf$n.used)
ts.acf$acf %>% 
  as_tibble() %>% mutate(lags = 0:(n()-1)) %>% 
  ggplot(aes(x=lags, y = V1)) + 
  scale_x_continuous(breaks=seq(0,41,4)) +
  geom_hline(yintercept=0, lty=1, col='black') +
  labs(y="Autocorrelations", x="Lag") +
  geom_segment(aes(xend=lags, yend=0), color = "cyan4", linewidth = 0.8) +
  geom_point(color = "cyan4", size = 3) + 
  theme_setting +
  geom_ribbon(aes(ymin = conf.lims[1], ymax = conf.lims[2]), alpha = 0.2, fill = "cyan4") +
  ylim(-0.25, 1.0) 

#pacf plot
ts.pacf <- pacf(x, main=NULL,plot=F)  
alpha <- 0.95
conf.lims <- c(-1,1)*qnorm((1 + alpha)/2)/sqrt(ts.pacf$n.used)

ts.pacf$acf <- c(1, ts.pacf$acf)
ts.pacf$acf %>% 
  as_tibble() %>% mutate(lags = 0:(n()-1)) %>%
  ggplot(aes(x=lags, y = value)) + 
  scale_x_continuous(breaks=seq(0,41,4))+ 
  geom_hline(yintercept=0, lty=1, col='black') +
  geom_segment(aes(xend=lags, yend=0), color = "cyan4", linewidth = 0.8) +
  geom_point(color = "cyan4", size = 3) + 
  theme_setting + 
  labs(y="Partial Autocorrelations", x="Lag") +
  geom_ribbon(aes(ymin = conf.lims[1], ymax = conf.lims[2]), alpha = 0.2, fill = "cyan4") +
  ylim(-0.25, 1.0) 

#ecdf plot
df <- data.frame(rate = x)
ggplot(df, aes(rate)) + 
  stat_ecdf(geom = "point", col = "coral1", size = 5) +
  theme_setting + 
  labs(y="F(Velocity of dispersion)", x="Velocity of dispersion") +
  stat_function(fun=pnorm, color = "darkred", linewidth = 1,
                args = list(mean = mean(x), sd = sd(x)))

#qq plot
ggplot(df, aes(sample = rate)) +
  stat_qq(color = "steelblue1", size = 5) +
  stat_qq_line(color = "steelblue4", linewidth = 1) +
  theme_setting +
  labs(y="Sample quantiles", x="Theoretical quantiles") 

